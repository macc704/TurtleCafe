<?xml version="1.0" encoding="UTF-8"?>
<doc xml:lang="ja">
<head>
<title>集合データ構造とアルゴリズム</title>
</head>
<body>
<section title="学習目標">
<ul>
<li>入れ物を使ったプログラムが書けるようになる</li>
<li>ソートプログラムが作れるようになる</li>
</ul>
</section>
<fyi title="！！重要！！　新しいライブラリ">
<p>今回は、「入れ物タートル」「ボタンタートル」「入力タートル」という新しい機能が入ったライブラリを使います。</p>
<p>
				まず、皆さんが使っている論プロエディタの「lib」というフォルダにある、blib101.jarというファイルを削除してください。
				これは、今まで使っていた古いライブラリです。
			</p>
<p>
<a href="http://www.crew.sfc.keio.ac.jp/~macchan/download/re/">
					論プロエディタのダウンロードページ
				</a>
				から新しいライブラリ（blib104.jar)をダウンロードし、皆さんが使っている論プロエディタの「lib」というフォルダに入れてください。
			</p>
<p>
				入れ替えができたら、新しいライブラリの動作確認をしてみましょう。タートルテンプレートを選び、startメソッド内に以下のプログラムを入力して、コンパイル・実行してください。
			</p>
<program>
				
	HolderTurtle holder = new HolderTurtle();
	holder.最後に追加する(new CardTurtle(99));
	update();
				
			</program>
<p>
				以下のような画面が表示されれば成功です。
				<figure id="fig:HelloHolderTurtle" title="はじめての入れ物タートル" src="image/HelloHolderTurtle" style="scale:1.0"/>
</p>
</fyi>
<section title="入れ物を使ったプログラム">
<p>
				Squeak編で理解した知識が生かせるように、Squeak編のときに利用したものと同じ入れ物をJavaで使えるようにしました（メソッド名も日本語にしてみました）。
				利用法はほぼ一緒ですが、若干異なる部分もありますので、ここでは、Java版の入れ物の使い方を説明します。
			</p>
<subsection title="カードを出し入れするプログラム">
<p>このプログラムは、１０枚のカードを入れ物１に入れ、１枚ずつ取り出して入れ物２に移すプログラムです。</p>
<program title="MoveCards.java" id="src:MoveCards" src="src/MoveCards.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/MoveCards.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、MoveCardsプログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="MoveCards"/>
</applet>]]></native>
<subsubsection title="グローバル変数">
<p>
						このプログラムでは、はじめに、クラスブロック内で変数を宣言しています。
						このように、クラスブロック内で宣言された変数をグローバル変数
						<note>
							Javaでは、このような変数を正式にはインスタンス変数と言います。
							ここでは、クラスのメソッドに対してグローバルな変数である、という意味で、ローカル変数と対比する概念として、グローバル変数という表現を用いています。
						</note>
						といいます。指定されたブロック内（たとえば、あるメソッド内）でしか有効でない変数をローカル変数といいます。
						グローバル変数の有効範囲は、クラス全体です。そのクラスのどのメソッドからも使うことができます。
					</p>
<program>
						
 13: 	// 入れ物
 14: 	HolderTurtle holder1;
 15: 	HolderTurtle holder2;


					</program>
<p>
						このプログラムでは、holder1とholder2をグローバル変数として宣言し、
						startメソッドと初期化するメソッドの２つのメソッドで、これらの変数を使っています。
					</p>
<p>
						グローバル変数は、クラス内のどのメソッドからも値を変更できるため、プログラムが意図しない動作をしたとき、どのメソッドで値が変更されたかを読み解くことが困難になります。
						このようにプログラムの保守性が下がるため、グローバル変数の使用は、プログラミングの作法としてはあまりよくないものだと言われています。
					</p>
<p>
						しかし、ある変数が多くのメソッドで使われる場合、グローバル変数を使わなければ、毎回変数を引数として渡さなければならず、面倒です。
						そのため、ある変数が多くのメソッドで使われる場合、グローバル変数として宣言することがあります。
					</p>
<p>
						このプログラムでは、startメソッドと初期化するメソッドの両方で、holder1とholder2という変数を使っているため、
						この２つをグローバル変数として宣言しています。
					</p>
</subsubsection>
<subsubsection title="break文">
<p>
						このプログラムでは、アニメーションループを抜け出すためにbreak文を使用しています。
						break文が繰り返し文（while文、for文、do/while文）の中で実行されると、
						プログラムの処理の流れはただちに繰り返し構造から抜け出し、
						制御が繰り返し構造の直後にある命令に移ります。
					</p>
<program>
						
 23: 		// アニメションループ
 24: 		while (true) {
 25:
 26: 			// 処理を行う
 27: 			if (holder1.入っているものの個数() != 0) {
 28: 				holder2.最後に追加する(holder1.カーソル位置にあるもの());// 入れ物１から入れ物２にカードを移動する
 29: 			} else if (holder1.入っているものの個数() == 0) {
 30: 				print("カード移動を終了します");
 31: 				break;// アニメーションループを抜ける
 32: 			} else {
 33: 				print("エラー");
 34: 			}
 35:
 36: 			// 再描画する
 37: 			update();
 38:
 39: 			// 待つ
 40: 			sleep(1);
 41: 		}
 42:
 43: 		print("アニメーションループを終了しました");
 44: 	}


					</program>
<p>
						このプログラムでは、holder1に入っているものの個数が0になると、
						24行目から41行目までのアニメーションループを脱出し、制御が43行目に移ります。
					</p>
<p>
						break文は、構造化プログラミング（入り口ひとつ、出口ひとつの処理構造）を破壊するものとして、
						プログラミングの作法としてはあまりよくないものだと言われています。
						break文を使わなくても、同じ処理の流れを定義することは可能なので、
						プログラミングの作法を重んじるプログラマは、break文の代わりに変数を用いて繰り返し構造を制御し、
						break文を使わないプログラムを記述します。
					</p>
<p>
						ここでは、「繰り返しを抜ける」ということを変数を使わず表現し、分かりやすくするため、break文を使っています。
					</p>
</subsubsection>
</subsection>
<subsection title="入れ物に関する新しい命令">
<p>
					この章では、「入れ物タートル」を使ったプログラミングを行います。
					以下に、入れ物タートルに関する命令の一覧を示します。
				</p>
<subsubsection title="入れ物を作る命令">
<dl>
<dt>HolderTurtle [変数名];</dt>
<dd>入れ物タートル型の変数を宣言します。</dd>
<dt>
							[（入れ物タートル型として宣言済みの）変数名] = new HolderTurtle()
						</dt>
<dd>[変数名]という名前の新しい入れ物タートルを作ります。</dd>
</dl>
<p/>
</subsubsection>
<subsubsection title="追加と削除">
<p/>
<dl>
<dt>最後に追加する([追加するもの])</dt>
<dd>
							入れ物の最後にタートル型<note>画像タートル・テキストタートル・カードタートルのいずれか。自作のHouse、Starなどは今のところ対応していません。</note>のものを追加します。
						</dd>
<dt>先頭に追加する([追加するもの])</dt>
<dd>
							入れ物の先頭にタートル型（注釈参照）のものを追加します。
						</dd>
<dt>カーソル位置に追加する([追加するもの])</dt>
<dd>
							入れ物のカーソル位置に（注釈参照）のものを追加します。
						</dd>
<dt>カーソル位置のものを削除する()</dt>
<dd>カーソル位置にあるものを削除します</dd>
<dt>入っているものを全て捨てる()</dt>
<dd>入れ物に入っているものを全て捨てます。</dd>
</dl>
</subsubsection>
<subsubsection title="カーソルに関する命令">
<p/>
<dl>
<dt>カーソル位置()</dt>
<dd>現在のカーソル位置を取得します。</dd>
<dt>カーソル位置を変える([カーソル番号])</dt>
<dd>カーソル位置を、指定したカーソル番号に変えます</dd>
<dt>カーソルを進める()</dt>
<dd>カーソルを１進めます</dd>
<dt>カーソルを戻す()</dt>
<dd>カーソルを１戻します</dd>
<dt>カーソル位置にあるもの()</dt>
<dd>カーソル位置にあるものを取得します。</dd>
<dt>カーソル位置にあるものの数値()</dt>
<dd>
							カーソル位置にあるカードの数値を取得します。カーソル位置にあるものが数字の書かれたカードでない場合は、-1を返します。
						</dd>
<dt>カーソル位置にあるものの内容()</dt>
<dd>
							カーソル位置にあるカードの内容を文字列型で取得します。内容が取得できない場合はNULLという文字列を返します。
						</dd>
</dl>
</subsubsection>
<subsubsection title="その他の命令">
<p/>
<dl>
<dt>かきまぜる()</dt>
<dd>入れ物の中身をかきまぜます。</dd>
<dt>入っているものの個数()</dt>
<dd>入っているものの個数を取得します</dd>
</dl>
</subsubsection>
</subsection>
<subsection title="カードに関する新しい命令">
<p>以下に、カードに関する新しい命令の一覧を示します</p>
<subsubsection title="カードを作る命令">
<dl>
<dt>CardTurtle [変数名];</dt>
<dd>カードタートル型の変数を宣言します。</dd>
<dt>
							[（カードタートル型として宣言済みの）変数名] = new
							CardTurtle([カードの内容])
						</dt>
<dd>
							[変数名]という名前の新しいカードタートルを作ります。カードの内容には、文字列、小数、整数を入れることができます。
						</dd>
</dl>
</subsubsection>
<subsubsection title="その他の命令">
<dl>
<dt>text()</dt>
<dd>カードの内容を文字列型で取得します</dd>
<dt>text([カードの内容])</dt>
<dd>カードの内容を、指定したカードの内容に変えます</dd>
<dt>fontsize()</dt>
<dd>カードの内容のフォントサイズを取得します</dd>
<dt>fontsize([フォントサイズの指定])</dt>
<dd>カードの内容のフォントサイズを指定します</dd>
</dl>
</subsubsection>
</subsection>
<fyi title="カードを作り、入れ物に入れる命令の省略形">
<p>新しいカードを作り、入れ物に入れるときには、以下のように命令を書きます。</p>
<program>
							
CardTurtle card;
card = new CardTurtle(10);
holder.最後に追加する(card);

						</program>
<p>
							この３文は、以下のように省略して書くことができます。
						</p>
<program>
							
holder.最後に追加する(new CardTurtle(10));

						</program>
</fyi>
<fyi title="やってみよう！">
<p>ランダムな数が書かれたカードが１０枚入った入れ物を作ろう。</p>
</fyi>
<fyi title="やってみよう！">
<p>
						0から9までの数が書かれたカードが１０枚入った入れ物を作り、１秒に１回かきまぜて、
						かきまぜるたびに「先頭にある数は○○です」と表示するプログラムを作ろう。
					</p>
</fyi>
<fyi title="やってみよう！">
<p>
						ユーザに「何番目のカードを選びますか？」と表示し、ユーザからカーソル位置の入力を受けつけ、
						１０枚のカードが入った入れ物から、ユーザが入力した位置にあるカードの数字を取得し、
						「あなたの選んだカードに書かれている数は○○ですね」と表示するプログラムを作ろう。
					</p>
</fyi>
</section>
<section title="ソートアルゴリズム">
<subsection title="ソートアルゴリズムとは">
<p>
					Squeak編で学んだように、ソートアルゴリズムとは、ばらばらに並んでいるものを決まったならびに並び替える手順のことです。
				</p>
<p>
					本節では、Squeak編で学習した最小値選択法を、Squeakで行った方法と全く同じ方法で（１重ループ）で実現したもの（Squeakと同じ）をまず作成します。
				</p>
<p>次に、Squeakではできなかった2重ループで実現したものを作ってみます。</p>
</subsection>
<subsection title="１重ループの最小値選択法（Squeakと同じ）">
<p>それでは、１重ループのプログラムを見ていきましょう。</p>
<subsubsection title="１重ループの最小値選択法（Squeakと同じ）のフローチャート">
<p>
						このフローチャートでは、全体が１つのループの中に入っています。
						<figure id="fig:SortSingleLoop" title="最小値検索法１重（Squeakと同じ）ループフローチャート" src="image/SortSingleLoop" style="scale:0.8"/>
</p>
</subsubsection>
<subsubsection title="最小値選択法（１重ループ（Squeakと同じ））">
<p>このプログラムは１重ループの最小値選択法の例です。</p>
<program title="SelectionSort1.java" id="src:SelectionSort1" src="src/SelectionSort1.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/SelectionSort1.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、SelectionSort1プログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="SelectionSort1"/>
</applet>]]></native>
</subsubsection>
</subsection>
<subsection title="２重ループの最小値選択法">
<p>次に、２重ループのプログラムを見ていきましょう。</p>
<subsubsection title="２重ループの最小値選択法のフローチャート">
<p>
						このフローチャートでは、ループの中にループが入っています。
						<figure id="fig:SortDoubleLoop" title="最小値選択法２重ループフローチャート" src="image/SortDoubleLoop" style="scale:0.8"/>
</p>
</subsubsection>
<fyi title="while文とdo-while文">
<p>
							while文とdo-while文は、両方とも繰り返しを表す文ですが、
							条件判断の位置が違います。
							while文は、最初に繰り返しを続けるかどうか調べて、続けるならば処理を行い、
							続けないならば処理を抜ける、という構造をしています。
							do-while文は、はじめに処理を行い、処理を行ったあとで、
							繰り返しを続けるかどうか調べて、続けるならば２回目の処理を行い、続けないならば処理を抜ける、
							という構造をしています。
						</p>
</fyi>
<subsubsection title="最小値選択法（２重ループ）">
<p>このプログラムは２重ループの最小値選択法の例です。</p>
<program title="SelectionSort2.java" id="src:SelectionSort2" src="src/SelectionSort2.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/SelectionSort2.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、SelectionSort2プログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="SelectionSort2"/>
</applet>]]></native>
<p>
						このプログラムでは、命令が実行されるたびに再描画しています。
						これは、カードの動く様子を目に見えるようにするためです。
						再描画命令を書かなければ、カードの動く様子は描画されず、処理前と処理後の様子のみが描画されます。
						１重ループの最小値選択法では、ループの最後のみに際描画命令を書いていましたが、
						２重ループのプログラムで、外側のループの最後のみに再描画命令を書くと、
						内側のループを処理している間、カードの移動が一度も描かれません。
					</p>
<fyi title="考えてみよう！">
<p>
							１重ループ・２重ループのフローチャートとプログラムを比較して、どちらが分かりやすいか考えてみましょう。
							また、どちらがプログラムとして書きやすいか考えてみましょう。
						</p>
</fyi>
</subsubsection>
</subsection>
</section>
<section title="ボタンを使ったプログラム">
<p>
				Java版ソートプログラムを実行してみるときに、リセットしたり、ストップしたりするボタンがないのが不便ですね。
				ここでは、タートルライブラリのボタンタートルの使い方を説明し、Java版ソートプログラムに組み込む例を提示します。
				次に、ボタンを使うと、1ステップごとに処理を止めているように見せるプログラム（ステップ実行）のプログラムも比較的簡単に作れることを示します。
			</p>
<p>
				ボタンを使ったプログラムをアプレットで実行する際には、
				必ず、ボタンが表示されている画面を一度クリックしてください。
				ボタンが表示されている画面をクリックしないと、ボタンへの入力が受け付けられません。
			</p>
<subsection title="どのボタンが押されたか表示するプログラム">
<p>このプログラムは、どのボタンが押されたかをコンソールに表示するプログラムです。</p>
<program title="ButtonSample.java" id="src:ButtonSample" src="src/ButtonSample.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/ButtonSample.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、ButtonSampleプログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="ButtonSample"/>
</applet>]]></native>
<p>ボタンが押されたら、ボタンの内容をコンソールに出力します。</p>
</subsection>
<subsection title="ボタンに関する新しい命令">
<p>以下に、ボタンに関する命令の一覧を示します</p>
<subsubsection title="ボタンを作る命令">
<dl>
<dt>ButtonTurtle [変数名];</dt>
<dd>ボタンタートル型の変数を宣言します。</dd>
<dt>
							[（ボタンタートル型として宣言済みの）変数名] = new
							ButtonTurtle([ボタンのラベル])
						</dt>
<dd>[変数名]という名前の新しいボタンタートルを作ります。</dd>
</dl>
<p/>
</subsubsection>
<subsubsection title="ボタンから入力を受け付ける命令">
<dl>
<dt>isClicked()</dt>
<dd>ボタンがクリックされたか調べます</dd>
</dl>
<p/>
</subsubsection>
<subsubsection title="その他の命令">
<dl>
<dt>text()</dt>
<dd>ボタンのラベルを文字列型で取得します</dd>
<dt>text([ボタンのラベル])</dt>
<dd>ボタンのラベルを、指定したボタンのラベルに変えます</dd>
<dt>fontsize()</dt>
<dd>ボタンのラベルのフォントサイズを取得します</dd>
<dt>fontsize([フォントサイズの指定])</dt>
<dd>ボタンのラベルのフォントサイズを指定します</dd>
</dl>
</subsubsection>
<fyi title="やってみよう！">
<p>
						１０枚のカードが入った入れ物と、「カーソルを１進める」というボタンを用意し、
						ボタンを押すとカーソルを１進めるプログラムを作ってみよう。
					</p>
</fyi>
</subsection>
<subsection title="押されたボタンによって状態を切り替えるプログラム">
<p>
					「どのボタンを押したか表示するプログラム」は、ボタンを押したら命令を１回だけ実行するプログラムでした。
					ボタンを使って「命令を１回実行する」のではなく、
					「スタートボタンが押されてから、ストップボタンが押されるまで、このプログラムを実行したい」というように、
					プログラムの状態を切り替えたい時があります。
				</p>
<p>このプログラムは、ボタンによって状態を切り替え、表示する内容を変えるプログラムです。</p>
<program title="ButtonSwitchSample.java" id="src:ButtonSwitchSample" src="src/ButtonSwitchSample.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/ButtonSwitchSample.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、ButtonSwitchSampleプログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="ButtonSwitchSample"/>
</applet>]]></native>
<p>
					このプログラムでは、0.25秒に1回、textという変数に保存された文字をコンソールに出力しています。
					ボタンが押されたら、textという変数の値が書き換わり、出力される文字が変わります。
				</p>
</subsection>
<subsection title="ソートアルゴリズム（ボタンの実用例）">
<p>以下のプログラムは、ボタンを使ってソートアルゴリズムの処理の流れを制御している例です。</p>
<p>
					ボタンを使って、途中で最小値選択法の処理を一時停止したり、
					ステップ実行（命令を1行ごとに実行すること）できるようにして、
					ソートアルゴリズムを観察できるようにしています。
				</p>
<subsubsection title="最小値選択法（１重ループ・ボタンあり）">
<p>
						このプログラムは１重ループの最小値選択法に改良を加え、
						ボタンからの入力を受付け、スタート・ストップ・リセットをできるようにしたものです。
					</p>
<program title="SelectionSort1WithButton.java" id="src:SelectionSort1WithButton" src="src/SelectionSort1WithButton.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/SelectionSort1WithButton.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、SelectionSort1WithButtonプログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="SelectionSort1WithButton"/>
</applet>]]></native>
<p>
						ボタンの入力を受け付ける命令は、0.025秒に1回実行し、スムーズに入力を受け付けられるようにし、
						最小値選択法は、動きが目で観察できるように、カウンタ
						<note>
							このプログラムのカウンタは、0.025秒ごとに1,2,3,4,5,6,7,0,1,2,3,4...と変化していきます。
							このプログラムでは、カウンタの値が0のときに最小値選択法の１ステップの処理をするので、
							最小値選択法は、0.2秒に１回、実行されることになります。
						</note>
						を使って0.2秒に１回実行するようにしています。
					</p>
</subsubsection>
<subsubsection title="最小値選択法（１重ループ・ステップ実行）">
<p>
						このプログラムは、最小値選択法を１ステップごとに停止させ、
						最小値選択法が実行される様子を観察できるようにしたものです。
					</p>
<program title="SelectionSort1ByStep.java" id="src:SelectionSort1ByStep" src="src/SelectionSort1ByStep.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/SelectionSort1ByStep.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、SelectionSort1ByStepプログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="SelectionSort1ByStep"/>
</applet>]]></native>
</subsubsection>
<subsubsection title="最小値選択法（２重ループ・ボタンあり）">
<p>
						このプログラムは２重ループの最小値選択法に改良を加え、
						ボタンからの入力を受付け、スタート・ストップ・リセットをできるようにしたものです。
					</p>
<program title="SelectionSort2WithButton.java" id="src:SelectionSort2WithButton" src="src/SelectionSort2WithButton.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/SelectionSort2WithButton.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、SelectionSort2WithButtonプログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="SelectionSort2WithButton"/>
</applet>]]></native>
</subsubsection>
<subsubsection title="最小値選択法（２重ループ・ステップ実行）">
<p>
						このプログラムは、最小値選択法を１ステップごとに停止させ、
						最小値選択法が実行される様子を観察できるようにしたものです。
					</p>
<program title="SelectionSort2ByStep.java" id="src:SelectionSort2ByStep" src="src/SelectionSort2ByStep.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/SelectionSort2ByStep.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、SelectionSort2ByStepプログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="SelectionSort2ByStep"/>
</applet>]]></native>
<fyi title="!（論理否定演算子）">
<p>
							!を論理否定演算子といい、真偽値を逆にする演算子です。!(true)=false、!(false)=trueとなります。
							このプログラムに使われている!(StepButton.isClicked())は、
							ステップボタンが押されていたら、falseを返し、押されていなかったら、trueを返します。
						</p>
</fyi>
</subsubsection>
</subsection>
</section>
<section title="辞書の作成">
<p>Squeak編と同様の辞書を作ってみましょう。</p>
<subsection title="入力タートル">
<p>
					辞書を作るには、タートル画面から入力を受け付ける部品が必要です。入力を受け付けるには入力タートルを使います（あわてて作ったので、ひらがなしか入力できません、すみません）。
				</p>
<subsubsection title="おうむ返しプログラム（入力タートルバージョン）">
<p>このプログラムは、入力された文字をそのまま表示するプログラムです。</p>
<program title="RepeatWord.java" id="src:RepeatWord" src="src/RepeatWord.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/RepeatWord.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、RepeatWordプログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="RepeatWord"/>
</applet>]]></native>
<p>
						キー入力を受けつけ、エンターキーが押されたら、おうむ返しをして、入力ボックスをリセットしています。
					</p>
</subsubsection>
<subsubsection title="2つの入力タートルの制御">
<p>
						上記プログラムでは、入力タートルを2つ以上作った場合に、両方のタートルに文字が入力されてしまいます。
						これを解決する方法を次のプログラムに示します。このプログラムは、入力タートルを2つを作り、
						キー操作によってどちらの入力ボックスを使うか切り替えるプログラムです。
					</p>
<program title="TwoInputBoxes.java" id="src:TwoInputBoxes" src="src/TwoInputBoxes.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/TwoInputBoxes.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、TwoInputBoxesプログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="TwoInputBoxes"/>
</applet>]]></native>
<p>スペースキーが押されたら、フォーカスを切り替えています。</p>
</subsubsection>
<subsubsection title="入力タートルに関する新しい命令">
<p>以下に、入力タートルに関する命令の一覧を示します</p>
<subsubsection title="入力タートルを作る命令" sequencable="false">
<dl>
<dt>InputTurtle [変数名];</dt>
<dd>入力タートル型の変数を宣言します。</dd>
<dt>
								[（入力タートル型として宣言済みの）変数名] = new　InputTurtle()
							</dt>
<dd>[変数名]という名前の新しい入力タートルを作ります。</dd>
</dl>
<p/>
</subsubsection>
<subsubsection title="入力タートルから入力を受け付ける命令" sequencable="false">
<dl>
<dt>text()</dt>
<dd>入力タートルの内容を取得します</dd>
<dt>setActive([真偽値(true or false)])</dt>
<dd>入力受付状態を設定します</dd>
<dt>isActive()</dt>
<dd>入力受付状態を調べます</dd>
</dl>
<p/>
</subsubsection>
<subsubsection title="その他の命令" sequencable="false">
<dl>
<dt>clearText()</dt>
<dd>入力タートルの内容を消去します</dd>
<dt>toJapaneseMode()</dt>
<dd>日本語入力モードにします。入力できるのはかなのみです。</dd>
<dt>toEnglishMode()</dt>
<dd>英語入力モードにします。入力できるのは小文字のみです。</dd>
<dt>fontsize()</dt>
<dd>フォントサイズを取得します</dd>
<dt>fontsize([フォントサイズの指定])</dt>
<dd>フォントサイズを指定します</dd>
</dl>
</subsubsection>
<fyi title="やってみよう！">
<p>
							入力タートルを１つ用意し、スペースキーで入力モード（日本語、英語）を切り替えるプログラムを作ってみよう。
						</p>
</fyi>
</subsubsection>
</subsection>
<subsection title="辞書プログラム">
<subsubsection title="辞書プログラム">
<p>このプログラムは、２つの入れ物を使った辞書プログラムです。</p>
<p>
						１つの入れ物に、索引となるキーを入れ、もうひとつの入れ物にはデータを入れています。
						ユーザが入力した語が、キーの入れ物にあるかどうか調べて、
						あれば、キーの入れ物のカーソル位置と同じカーソル位置にあるデータを返します。
					</p>
<program title="Dictionary.java" id="src:Dictionary" src="src/Dictionary.java" javasrcSyntaxHilight="true" normalizer="line, javasrc" encoding="Shift_JIS"/>
<p>
<a href="chapter13/src/Dictionary.java">
        		ここ
			</a>
			をクリックすると、プログラムをダウンロードできます。
		</p>
<p>
			下のボタンを押すと、Dictionaryプログラムが実行できます。
		</p>
<native format="html4"><![CDATA[
<applet code="TurtleLaunchApplet" archive="chapter13_binary.jar,blib.jar" width="200" height="38">
<param name="Turtle" value="Dictionary"/>
</applet>]]></native>
<fyi title="文字列の内容が一致しているか調べる命令">
<p>
							このプログラムでは文字列の内容が一致しているかどうか調べるために、equals命令を使っています。
						</p>
<program>
							 46: if (key.カーソル位置にあるものの内容().equals(searchKey))
						</program>
<p>
							数値の同値性を調べるためにこれまで利用してきた==命令は、文字列の同値性を調べるためには使えません（正確には、使えます（コンパイルは通る）が、内容ではなくオブジェクトが同じかどうか比較してしまうので、誤った結果になる場合があります）。
						</p>
<p>
							文字列の内容が一致しているかどうか調べたいときは、A.equals(B)のように、equals命令を使う必要があります（A,Bはそれぞれ文字列型の変数）。
						</p>
</fyi>
</subsubsection>
</subsection>
</section>
<section title="練習問題">
<subsection title="問題1：挿入法のソートプログラムを作ろう">
<p>下の実行例を参考に、挿入法の並べ替えプログラムを作りましょう。</p>
<p>スタート・ストップ・リセット・ステップなどのボタンはつけなくてかまいません。</p>
<native format="html4">
					
&lt;applet code="TurtleLaunchApplet" archive="chapter13_binary.jar" width="200" height="38"&gt;
	&lt;param name="Turtle" value="InsertionSortWithButton"/&gt;
&lt;/applet&gt;

				</native>
</subsection>
<subsection title="問題2：入れ物を使ったアプリケーションを作ろう">
<p>
					下の実行例を参考に、入れ物を使ったアプリケーションを作りましょう。
					２つのうちのどれか１つを選んで、実装してください。
				</p>
<subsubsection title="問題2-1：作文さん">
<p>
						このプログラムは、入れ物に名詞と動詞を保存して、作文するプログラムです。
					</p>
<p>
						（入れ物は、ウインドウの下のほうに隠れています。ウインドウを広げてみてください）
					</p>
<native format="html4">
						
&lt;applet code="TurtleLaunchApplet" archive="chapter13_binary.jar" width="200" height="38"&gt;
	&lt;param name="Turtle" value="SakubunApplication"/&gt;
&lt;/applet&gt;

					</native>
<fyi title="実装のヒント">
<p>このプログラムでは、入力ボックスをコピーし、コピーしたものを入れ物に入れています。</p>
<p>
							以下のプログラムでは、inputという入力タートルの内容をテキストタートルにコピーし、
							そのテキストタートルをnounsという入れ物に入れています。
						</p>
<program>
							
nouns.最後に追加する(new TextTurtle(input.text()));
							
						</program>
<p>このプログラムを参考に、作文さんプログラムを実装してください。</p>
</fyi>
</subsubsection>
<subsubsection title="問題2-2：タイピングゲーム">
<p>
						このプログラムは、入れ物に絵と単語を保存して、タイピングゲームをするプログラムです。
						（入れ物は、ウインドウの下のほうに隠れています。ウインドウを広げてみてください）
					</p>
<native format="html4">
						
&lt;applet code="TurtleLaunchApplet" archive="chapter13_binary.jar" width="200" height="38"&gt;
	&lt;param name="Turtle" value="TypingApplication"/&gt;
&lt;/applet&gt;

					</native>
<fyi title="実装のヒント">
<p>
							このプログラムでは、時間を扱います。以下のプログラムは、開始時間をミリ秒で取得するプログラムです。
						</p>
<p>long型は、int型よりも桁数の大きな数字を扱える型です。</p>
<program>
long startTime = System.currentTimeMillis();
						</program>
<p>
							以下のように、開始時間と終了時間の差（ミリ秒単位）を求め、
							それを分単位に変換し、タイピング文字数をかかった時間（分）で割ることで、
							タイピング速度を求めることができます。
						</p>
<program>
							
long endTime = System.currentTimeMillis();
long miliTime = endTime - startTime;//かかった時間（ミリ秒）
double time = (double) miliTime / (double) 1000 / (double) 60;//かかった時間(分)
int speed = (int) (inputCharacterCount / time);
result.text("あなたのタイピング速度は" + speed + "文字/分です．");
					
						</program>
</fyi>
</subsubsection>
</subsection>
</section>
</body>
</doc>
